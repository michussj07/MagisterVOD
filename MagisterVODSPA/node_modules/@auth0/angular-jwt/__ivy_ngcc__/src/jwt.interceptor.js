import { Injectable, Inject } from '@angular/core';
import { JwtHelperService } from './jwthelper.service';
import { JWT_OPTIONS } from './jwtoptions.token';
import { from } from "rxjs";
import { mergeMap } from 'rxjs/operators';
import { parse } from 'url';
import * as ɵngcc0 from '@angular/core';
var JwtInterceptor = /** @class */ (function () {
    function JwtInterceptor(config, jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.tokenGetter = config.tokenGetter;
        this.headerName = config.headerName || 'Authorization';
        this.authScheme =
            config.authScheme || config.authScheme === ''
                ? config.authScheme
                : 'Bearer ';
        this.whitelistedDomains = config.whitelistedDomains || [];
        this.blacklistedRoutes = config.blacklistedRoutes || [];
        this.throwNoTokenError = config.throwNoTokenError || false;
        this.skipWhenExpired = config.skipWhenExpired;
    }
    JwtInterceptor.prototype.isWhitelistedDomain = function (request) {
        var requestUrl = parse(request.url, false, true);
        return (requestUrl.host === null ||
            this.whitelistedDomains.findIndex(function (domain) {
                return typeof domain === 'string'
                    ? domain === requestUrl.host
                    : domain instanceof RegExp
                        ? domain.test(requestUrl.host)
                        : false;
            }) > -1);
    };
    JwtInterceptor.prototype.isBlacklistedRoute = function (request) {
        var url = request.url;
        return (this.blacklistedRoutes.findIndex(function (route) {
            return typeof route === 'string'
                ? route === url
                : route instanceof RegExp
                    ? route.test(url)
                    : false;
        }) > -1);
    };
    JwtInterceptor.prototype.handleInterception = function (token, request, next) {
        var tokenIsExpired = false;
        if (!token && this.throwNoTokenError) {
            throw new Error('Could not get token from tokenGetter function.');
        }
        if (this.skipWhenExpired) {
            tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;
        }
        if (token && tokenIsExpired && this.skipWhenExpired) {
            request = request.clone();
        }
        else if (token) {
            request = request.clone({
                setHeaders: (_a = {},
                    _a[this.headerName] = "" + this.authScheme + token,
                    _a)
            });
        }
        return next.handle(request);
        var _a;
    };
    JwtInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        if (!this.isWhitelistedDomain(request) ||
            this.isBlacklistedRoute(request)) {
            return next.handle(request);
        }
        var token = this.tokenGetter();
        if (token instanceof Promise) {
            return from(token).pipe(mergeMap(function (asyncToken) {
                return _this.handleInterception(asyncToken, request, next);
            }));
        }
        else {
            return this.handleInterception(token, request, next);
        }
    };
    /** @nocollapse */
    JwtInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [JWT_OPTIONS,] },] },
        { type: JwtHelperService, },
    ]; };
JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) { return new (t || JwtInterceptor)(ɵngcc0.ɵɵinject(JWT_OPTIONS), ɵngcc0.ɵɵinject(JwtHelperService)); };
JwtInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JwtInterceptor, factory: function (t) { return JwtInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwtInterceptor, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [JWT_OPTIONS]
            }] }, { type: JwtHelperService }]; }, null); })();
    return JwtInterceptor;
}());
export { JwtInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LmludGVyY2VwdG9yLmpzIiwic291cmNlcyI6WyJqd3QuaW50ZXJjZXB0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUF1RU0sQUFHQTs7Ozs7Ozs7Ozs7Ozs4REFLRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSnd0SGVscGVyU2VydmljZSB9IGZyb20gJy4vand0aGVscGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSldUX09QVElPTlMgfSBmcm9tICcuL2p3dG9wdGlvbnMudG9rZW4nO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAndXJsJztcbnZhciBKd3RJbnRlcmNlcHRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBKd3RJbnRlcmNlcHRvcihjb25maWcsIGp3dEhlbHBlcikge1xuICAgICAgICB0aGlzLmp3dEhlbHBlciA9IGp3dEhlbHBlcjtcbiAgICAgICAgdGhpcy50b2tlbkdldHRlciA9IGNvbmZpZy50b2tlbkdldHRlcjtcbiAgICAgICAgdGhpcy5oZWFkZXJOYW1lID0gY29uZmlnLmhlYWRlck5hbWUgfHwgJ0F1dGhvcml6YXRpb24nO1xuICAgICAgICB0aGlzLmF1dGhTY2hlbWUgPVxuICAgICAgICAgICAgY29uZmlnLmF1dGhTY2hlbWUgfHwgY29uZmlnLmF1dGhTY2hlbWUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyBjb25maWcuYXV0aFNjaGVtZVxuICAgICAgICAgICAgICAgIDogJ0JlYXJlciAnO1xuICAgICAgICB0aGlzLndoaXRlbGlzdGVkRG9tYWlucyA9IGNvbmZpZy53aGl0ZWxpc3RlZERvbWFpbnMgfHwgW107XG4gICAgICAgIHRoaXMuYmxhY2tsaXN0ZWRSb3V0ZXMgPSBjb25maWcuYmxhY2tsaXN0ZWRSb3V0ZXMgfHwgW107XG4gICAgICAgIHRoaXMudGhyb3dOb1Rva2VuRXJyb3IgPSBjb25maWcudGhyb3dOb1Rva2VuRXJyb3IgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuc2tpcFdoZW5FeHBpcmVkID0gY29uZmlnLnNraXBXaGVuRXhwaXJlZDtcbiAgICB9XG4gICAgSnd0SW50ZXJjZXB0b3IucHJvdG90eXBlLmlzV2hpdGVsaXN0ZWREb21haW4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICB2YXIgcmVxdWVzdFVybCA9IHBhcnNlKHJlcXVlc3QudXJsLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiAocmVxdWVzdFVybC5ob3N0ID09PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLndoaXRlbGlzdGVkRG9tYWlucy5maW5kSW5kZXgoZnVuY3Rpb24gKGRvbWFpbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZG9tYWluID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgICA/IGRvbWFpbiA9PT0gcmVxdWVzdFVybC5ob3N0XG4gICAgICAgICAgICAgICAgICAgIDogZG9tYWluIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRvbWFpbi50ZXN0KHJlcXVlc3RVcmwuaG9zdClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9KSA+IC0xKTtcbiAgICB9O1xuICAgIEp3dEludGVyY2VwdG9yLnByb3RvdHlwZS5pc0JsYWNrbGlzdGVkUm91dGUgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICB2YXIgdXJsID0gcmVxdWVzdC51cmw7XG4gICAgICAgIHJldHVybiAodGhpcy5ibGFja2xpc3RlZFJvdXRlcy5maW5kSW5kZXgoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHJvdXRlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gcm91dGUgPT09IHVybFxuICAgICAgICAgICAgICAgIDogcm91dGUgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICAgICAgICAgICAgICAgPyByb3V0ZS50ZXN0KHVybClcbiAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgfSkgPiAtMSk7XG4gICAgfTtcbiAgICBKd3RJbnRlcmNlcHRvci5wcm90b3R5cGUuaGFuZGxlSW50ZXJjZXB0aW9uID0gZnVuY3Rpb24gKHRva2VuLCByZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgIHZhciB0b2tlbklzRXhwaXJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRva2VuICYmIHRoaXMudGhyb3dOb1Rva2VuRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdldCB0b2tlbiBmcm9tIHRva2VuR2V0dGVyIGZ1bmN0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNraXBXaGVuRXhwaXJlZCkge1xuICAgICAgICAgICAgdG9rZW5Jc0V4cGlyZWQgPSB0b2tlbiA/IHRoaXMuand0SGVscGVyLmlzVG9rZW5FeHBpcmVkKHRva2VuKSA6IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuSXNFeHBpcmVkICYmIHRoaXMuc2tpcFdoZW5FeHBpcmVkKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgICAgICAgICAgc2V0SGVhZGVyczogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgIF9hW3RoaXMuaGVhZGVyTmFtZV0gPSBcIlwiICsgdGhpcy5hdXRoU2NoZW1lICsgdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIF9hKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgICAgICB2YXIgX2E7XG4gICAgfTtcbiAgICBKd3RJbnRlcmNlcHRvci5wcm90b3R5cGUuaW50ZXJjZXB0ID0gZnVuY3Rpb24gKHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzV2hpdGVsaXN0ZWREb21haW4ocmVxdWVzdCkgfHxcbiAgICAgICAgICAgIHRoaXMuaXNCbGFja2xpc3RlZFJvdXRlKHJlcXVlc3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbkdldHRlcigpO1xuICAgICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbSh0b2tlbikucGlwZShtZXJnZU1hcChmdW5jdGlvbiAoYXN5bmNUb2tlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVJbnRlcmNlcHRpb24oYXN5bmNUb2tlbiwgcmVxdWVzdCwgbmV4dCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVJbnRlcmNlcHRpb24odG9rZW4sIHJlcXVlc3QsIG5leHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBKd3RJbnRlcmNlcHRvci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEp3dEludGVyY2VwdG9yLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbSldUX09QVElPTlMsXSB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBKd3RIZWxwZXJTZXJ2aWNlLCB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIEp3dEludGVyY2VwdG9yO1xufSgpKTtcbmV4cG9ydCB7IEp3dEludGVyY2VwdG9yIH07XG4iXX0=
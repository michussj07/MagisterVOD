import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TimepickerActions } from './reducer/timepicker.actions';
import { TimepickerStore } from './reducer/timepicker.store';
import { TimepickerConfig } from './timepicker.config';
import { TimeChangeSource, TimepickerComponentState, TimepickerControls } from './timepicker.models';
import { Subscription } from 'rxjs';
import { ControlValueAccessorModel } from './models';
import * as ɵngcc0 from '@angular/core';
export declare const TIMEPICKER_CONTROL_VALUE_ACCESSOR: ControlValueAccessorModel;
export declare class TimepickerComponent implements ControlValueAccessor, TimepickerComponentState, TimepickerControls, OnChanges, OnDestroy {
    private _cd;
    private _store;
    private _timepickerActions;
    /** hours change step */
    hourStep: number;
    /** hours change step */
    minuteStep: number;
    /** seconds change step */
    secondsStep: number;
    /** if true hours and minutes fields will be readonly */
    readonlyInput: boolean;
    /** if true hours and minutes fields will be disabled */
    disabled: boolean;
    /** if true scroll inside hours and minutes inputs will change time */
    mousewheel: boolean;
    /** if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard */
    arrowkeys: boolean;
    /** if true spinner arrows above and below the inputs will be shown */
    showSpinners: boolean;
    /** if true meridian button will be shown */
    showMeridian: boolean;
    /** show minutes in timepicker */
    showMinutes: boolean;
    /** show seconds in timepicker */
    showSeconds: boolean;
    /** meridian labels based on locale */
    meridians: string[];
    /** minimum time user can select */
    min: Date;
    /** maximum time user can select */
    max: Date;
    /** placeholder for hours field in timepicker */
    hoursPlaceholder: string;
    /** placeholder for minutes field in timepicker */
    minutesPlaceholder: string;
    /** placeholder for seconds field in timepicker */
    secondsPlaceholder: string;
    /** emits true if value is a valid date */
    isValid: EventEmitter<boolean>;
    hours: string;
    minutes: string;
    seconds: string;
    meridian: string;
    /** @deprecated - please use `isEditable` instead */
    readonly isSpinnersVisible: boolean;
    readonly isEditable: boolean;
    invalidHours: boolean;
    invalidMinutes: boolean;
    invalidSeconds: boolean;
    labelHours: string;
    labelMinutes: string;
    labelSeconds: string;
    canIncrementHours: boolean;
    canIncrementMinutes: boolean;
    canIncrementSeconds: boolean;
    canDecrementHours: boolean;
    canDecrementMinutes: boolean;
    canDecrementSeconds: boolean;
    canToggleMeridian: boolean;
    onChange: Function;
    onTouched: Function;
    timepickerSub: Subscription;
    constructor(_config: TimepickerConfig, _cd: ChangeDetectorRef, _store: TimepickerStore, _timepickerActions: TimepickerActions);
    resetValidation(): void;
    isPM(): boolean;
    prevDef($event: Event): void;
    wheelSign($event: WheelEventInit): number;
    ngOnChanges(changes: SimpleChanges): void;
    changeHours(step: number, source?: TimeChangeSource): void;
    changeMinutes(step: number, source?: TimeChangeSource): void;
    changeSeconds(step: number, source?: TimeChangeSource): void;
    updateHours(hours: string): void;
    updateMinutes(minutes: string): void;
    updateSeconds(seconds: string): void;
    isValidLimit(): boolean;
    _updateTime(): void;
    toggleMeridian(): void;
    /**
     * Write a new value to the element.
     */
    writeValue(obj: string | null | undefined | Date): void;
    /**
     * Set the function to be called when the control receives a change event.
     */
    registerOnChange(fn: (_: any) => {}): void;
    /**
     * Set the function to be called when the control receives a touch event.
     */
    registerOnTouched(fn: () => {}): void;
    /**
     * This function is called when the control status changes to or from "disabled".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     *
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    private _renderTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimepickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimepickerComponent, "timepicker", never, {
    "disabled": "disabled";
    "hourStep": "hourStep";
    "minuteStep": "minuteStep";
    "secondsStep": "secondsStep";
    "readonlyInput": "readonlyInput";
    "mousewheel": "mousewheel";
    "arrowkeys": "arrowkeys";
    "showSpinners": "showSpinners";
    "showMeridian": "showMeridian";
    "showMinutes": "showMinutes";
    "showSeconds": "showSeconds";
    "meridians": "meridians";
    "min": "min";
    "max": "max";
    "hoursPlaceholder": "hoursPlaceholder";
    "minutesPlaceholder": "minutesPlaceholder";
    "secondsPlaceholder": "secondsPlaceholder";
}, {
    "isValid": "isValid";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGltZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0dBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVGltZXBpY2tlckFjdGlvbnMgfSBmcm9tICcuL3JlZHVjZXIvdGltZXBpY2tlci5hY3Rpb25zJztcbmltcG9ydCB7IFRpbWVwaWNrZXJTdG9yZSB9IGZyb20gJy4vcmVkdWNlci90aW1lcGlja2VyLnN0b3JlJztcbmltcG9ydCB7IFRpbWVwaWNrZXJDb25maWcgfSBmcm9tICcuL3RpbWVwaWNrZXIuY29uZmlnJztcbmltcG9ydCB7IFRpbWVDaGFuZ2VTb3VyY2UsIFRpbWVwaWNrZXJDb21wb25lbnRTdGF0ZSwgVGltZXBpY2tlckNvbnRyb2xzIH0gZnJvbSAnLi90aW1lcGlja2VyLm1vZGVscyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yTW9kZWwgfSBmcm9tICcuL21vZGVscyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBUSU1FUElDS0VSX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IENvbnRyb2xWYWx1ZUFjY2Vzc29yTW9kZWw7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW1lcGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFRpbWVwaWNrZXJDb21wb25lbnRTdGF0ZSwgVGltZXBpY2tlckNvbnRyb2xzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfY2Q7XG4gICAgcHJpdmF0ZSBfc3RvcmU7XG4gICAgcHJpdmF0ZSBfdGltZXBpY2tlckFjdGlvbnM7XG4gICAgLyoqIGhvdXJzIGNoYW5nZSBzdGVwICovXG4gICAgaG91clN0ZXA6IG51bWJlcjtcbiAgICAvKiogaG91cnMgY2hhbmdlIHN0ZXAgKi9cbiAgICBtaW51dGVTdGVwOiBudW1iZXI7XG4gICAgLyoqIHNlY29uZHMgY2hhbmdlIHN0ZXAgKi9cbiAgICBzZWNvbmRzU3RlcDogbnVtYmVyO1xuICAgIC8qKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIHJlYWRvbmx5ICovXG4gICAgcmVhZG9ubHlJbnB1dDogYm9vbGVhbjtcbiAgICAvKiogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSBkaXNhYmxlZCAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKiBpZiB0cnVlIHNjcm9sbCBpbnNpZGUgaG91cnMgYW5kIG1pbnV0ZXMgaW5wdXRzIHdpbGwgY2hhbmdlIHRpbWUgKi9cbiAgICBtb3VzZXdoZWVsOiBib29sZWFuO1xuICAgIC8qKiBpZiB0cnVlIHRoZSB2YWx1ZXMgb2YgaG91cnMgYW5kIG1pbnV0ZXMgY2FuIGJlIGNoYW5nZWQgdXNpbmcgdGhlIHVwL2Rvd24gYXJyb3cga2V5cyBvbiB0aGUga2V5Ym9hcmQgKi9cbiAgICBhcnJvd2tleXM6IGJvb2xlYW47XG4gICAgLyoqIGlmIHRydWUgc3Bpbm5lciBhcnJvd3MgYWJvdmUgYW5kIGJlbG93IHRoZSBpbnB1dHMgd2lsbCBiZSBzaG93biAqL1xuICAgIHNob3dTcGlubmVyczogYm9vbGVhbjtcbiAgICAvKiogaWYgdHJ1ZSBtZXJpZGlhbiBidXR0b24gd2lsbCBiZSBzaG93biAqL1xuICAgIHNob3dNZXJpZGlhbjogYm9vbGVhbjtcbiAgICAvKiogc2hvdyBtaW51dGVzIGluIHRpbWVwaWNrZXIgKi9cbiAgICBzaG93TWludXRlczogYm9vbGVhbjtcbiAgICAvKiogc2hvdyBzZWNvbmRzIGluIHRpbWVwaWNrZXIgKi9cbiAgICBzaG93U2Vjb25kczogYm9vbGVhbjtcbiAgICAvKiogbWVyaWRpYW4gbGFiZWxzIGJhc2VkIG9uIGxvY2FsZSAqL1xuICAgIG1lcmlkaWFuczogc3RyaW5nW107XG4gICAgLyoqIG1pbmltdW0gdGltZSB1c2VyIGNhbiBzZWxlY3QgKi9cbiAgICBtaW46IERhdGU7XG4gICAgLyoqIG1heGltdW0gdGltZSB1c2VyIGNhbiBzZWxlY3QgKi9cbiAgICBtYXg6IERhdGU7XG4gICAgLyoqIHBsYWNlaG9sZGVyIGZvciBob3VycyBmaWVsZCBpbiB0aW1lcGlja2VyICovXG4gICAgaG91cnNQbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIC8qKiBwbGFjZWhvbGRlciBmb3IgbWludXRlcyBmaWVsZCBpbiB0aW1lcGlja2VyICovXG4gICAgbWludXRlc1BsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgLyoqIHBsYWNlaG9sZGVyIGZvciBzZWNvbmRzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cbiAgICBzZWNvbmRzUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKiogZW1pdHMgdHJ1ZSBpZiB2YWx1ZSBpcyBhIHZhbGlkIGRhdGUgKi9cbiAgICBpc1ZhbGlkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgaG91cnM6IHN0cmluZztcbiAgICBtaW51dGVzOiBzdHJpbmc7XG4gICAgc2Vjb25kczogc3RyaW5nO1xuICAgIG1lcmlkaWFuOiBzdHJpbmc7XG4gICAgLyoqIEBkZXByZWNhdGVkIC0gcGxlYXNlIHVzZSBgaXNFZGl0YWJsZWAgaW5zdGVhZCAqL1xuICAgIHJlYWRvbmx5IGlzU3Bpbm5lcnNWaXNpYmxlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzRWRpdGFibGU6IGJvb2xlYW47XG4gICAgaW52YWxpZEhvdXJzOiBib29sZWFuO1xuICAgIGludmFsaWRNaW51dGVzOiBib29sZWFuO1xuICAgIGludmFsaWRTZWNvbmRzOiBib29sZWFuO1xuICAgIGxhYmVsSG91cnM6IHN0cmluZztcbiAgICBsYWJlbE1pbnV0ZXM6IHN0cmluZztcbiAgICBsYWJlbFNlY29uZHM6IHN0cmluZztcbiAgICBjYW5JbmNyZW1lbnRIb3VyczogYm9vbGVhbjtcbiAgICBjYW5JbmNyZW1lbnRNaW51dGVzOiBib29sZWFuO1xuICAgIGNhbkluY3JlbWVudFNlY29uZHM6IGJvb2xlYW47XG4gICAgY2FuRGVjcmVtZW50SG91cnM6IGJvb2xlYW47XG4gICAgY2FuRGVjcmVtZW50TWludXRlczogYm9vbGVhbjtcbiAgICBjYW5EZWNyZW1lbnRTZWNvbmRzOiBib29sZWFuO1xuICAgIGNhblRvZ2dsZU1lcmlkaWFuOiBib29sZWFuO1xuICAgIG9uQ2hhbmdlOiBGdW5jdGlvbjtcbiAgICBvblRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIHRpbWVwaWNrZXJTdWI6IFN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihfY29uZmlnOiBUaW1lcGlja2VyQ29uZmlnLCBfY2Q6IENoYW5nZURldGVjdG9yUmVmLCBfc3RvcmU6IFRpbWVwaWNrZXJTdG9yZSwgX3RpbWVwaWNrZXJBY3Rpb25zOiBUaW1lcGlja2VyQWN0aW9ucyk7XG4gICAgcmVzZXRWYWxpZGF0aW9uKCk6IHZvaWQ7XG4gICAgaXNQTSgpOiBib29sZWFuO1xuICAgIHByZXZEZWYoJGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgd2hlZWxTaWduKCRldmVudDogV2hlZWxFdmVudEluaXQpOiBudW1iZXI7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgY2hhbmdlSG91cnMoc3RlcDogbnVtYmVyLCBzb3VyY2U/OiBUaW1lQ2hhbmdlU291cmNlKTogdm9pZDtcbiAgICBjaGFuZ2VNaW51dGVzKHN0ZXA6IG51bWJlciwgc291cmNlPzogVGltZUNoYW5nZVNvdXJjZSk6IHZvaWQ7XG4gICAgY2hhbmdlU2Vjb25kcyhzdGVwOiBudW1iZXIsIHNvdXJjZT86IFRpbWVDaGFuZ2VTb3VyY2UpOiB2b2lkO1xuICAgIHVwZGF0ZUhvdXJzKGhvdXJzOiBzdHJpbmcpOiB2b2lkO1xuICAgIHVwZGF0ZU1pbnV0ZXMobWludXRlczogc3RyaW5nKTogdm9pZDtcbiAgICB1cGRhdGVTZWNvbmRzKHNlY29uZHM6IHN0cmluZyk6IHZvaWQ7XG4gICAgaXNWYWxpZExpbWl0KCk6IGJvb2xlYW47XG4gICAgX3VwZGF0ZVRpbWUoKTogdm9pZDtcbiAgICB0b2dnbGVNZXJpZGlhbigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgbmV3IHZhbHVlIHRvIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUob2JqOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkIHwgRGF0ZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCByZWNlaXZlcyBhIGNoYW5nZSBldmVudC5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB7fSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCByZWNlaXZlcyBhIHRvdWNoIGV2ZW50LlxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB7fSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCBzdGF0dXMgY2hhbmdlcyB0byBvciBmcm9tIFwiZGlzYWJsZWRcIi5cbiAgICAgKiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlLCBpdCB3aWxsIGVuYWJsZSBvciBkaXNhYmxlIHRoZSBhcHByb3ByaWF0ZSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0Rpc2FibGVkXG4gICAgICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgX3JlbmRlclRpbWU7XG59XG4iXX0=
import { EventEmitter, OnInit, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AccessorContent, RatingResults } from './models';
import { RatingConfig } from './rating.config';
import * as ɵngcc0 from '@angular/core';
export declare const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent;
export declare class RatingComponent implements ControlValueAccessor, OnInit {
    private changeDetection;
    /** number of icons */
    max: number;
    /** if true will not react on any user events */
    readonly: boolean;
    /** array of icons titles, default: (["one", "two", "three", "four", "five"]) */
    titles: string[];
    /** custom template for icons */
    customTemplate: TemplateRef<any>;
    /** fired when icon selected, $event:number equals to selected rating */
    onHover: EventEmitter<number>;
    /** fired when icon selected, $event:number equals to previous rating value */
    onLeave: EventEmitter<number>;
    onChange: any;
    onTouched: any;
    /** aria label for rating */
    ariaLabel: string;
    range: RatingResults[];
    value: number;
    protected preValue: number;
    constructor(changeDetection: ChangeDetectorRef, config: RatingConfig);
    onKeydown(event: KeyboardEvent): void;
    ngOnInit(): void;
    writeValue(value: number): void;
    enter(value: number): void;
    reset(): void;
    registerOnChange(fn: (_: number) => {}): void;
    registerOnTouched(fn: () => {}): void;
    rate(value: number): void;
    protected buildTemplateObjects(max: number): RatingResults[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RatingComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RatingComponent, "rating", never, {
    "max": "max";
    "titles": "titles";
    "readonly": "readonly";
    "customTemplate": "customTemplate";
}, {
    "onHover": "onHover";
    "onLeave": "onLeave";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJyYXRpbmcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWNjZXNzb3JDb250ZW50LCBSYXRpbmdSZXN1bHRzIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgUmF0aW5nQ29uZmlnIH0gZnJvbSAnLi9yYXRpbmcuY29uZmlnJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFJBVElOR19DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBBY2Nlc3NvckNvbnRlbnQ7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSYXRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0IHtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdGlvbjtcbiAgICAvKiogbnVtYmVyIG9mIGljb25zICovXG4gICAgbWF4OiBudW1iZXI7XG4gICAgLyoqIGlmIHRydWUgd2lsbCBub3QgcmVhY3Qgb24gYW55IHVzZXIgZXZlbnRzICovXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgLyoqIGFycmF5IG9mIGljb25zIHRpdGxlcywgZGVmYXVsdDogKFtcIm9uZVwiLCBcInR3b1wiLCBcInRocmVlXCIsIFwiZm91clwiLCBcImZpdmVcIl0pICovXG4gICAgdGl0bGVzOiBzdHJpbmdbXTtcbiAgICAvKiogY3VzdG9tIHRlbXBsYXRlIGZvciBpY29ucyAqL1xuICAgIGN1c3RvbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKiBmaXJlZCB3aGVuIGljb24gc2VsZWN0ZWQsICRldmVudDpudW1iZXIgZXF1YWxzIHRvIHNlbGVjdGVkIHJhdGluZyAqL1xuICAgIG9uSG92ZXI6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIC8qKiBmaXJlZCB3aGVuIGljb24gc2VsZWN0ZWQsICRldmVudDpudW1iZXIgZXF1YWxzIHRvIHByZXZpb3VzIHJhdGluZyB2YWx1ZSAqL1xuICAgIG9uTGVhdmU6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIG9uQ2hhbmdlOiBhbnk7XG4gICAgb25Ub3VjaGVkOiBhbnk7XG4gICAgLyoqIGFyaWEgbGFiZWwgZm9yIHJhdGluZyAqL1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIHJhbmdlOiBSYXRpbmdSZXN1bHRzW107XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgcHJlVmFsdWU6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmLCBjb25maWc6IFJhdGluZ0NvbmZpZyk7XG4gICAgb25LZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgZW50ZXIodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogbnVtYmVyKSA9PiB7fSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcbiAgICByYXRlKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBidWlsZFRlbXBsYXRlT2JqZWN0cyhtYXg6IG51bWJlcik6IFJhdGluZ1Jlc3VsdHNbXTtcbn1cbiJdfQ==